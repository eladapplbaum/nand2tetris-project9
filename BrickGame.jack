/**
 * Represents a Pong game.
 */
class BrickGame {

    static BrickGame instance; // the singelton, a Pong game instance     
    field Paddle paddle;            // the Paddle
    field Ball ball;          // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.
    field Array bricks; 
    field Brick brick;

    // The current width of the Paddle
    field int PaddleWidth;

    /** Constructs a new Pong game. */
    constructor BrickGame new() {
        var int i, j;

	    do Screen.clearScreen();

        let PaddleWidth = 50;  // initial Paddle size
        let paddle = Paddle.new(230, 229, PaddleWidth, 7);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
        let brick = Brick.new(200, 200);


        let bricks = Array.new(15);
        let i=0;
        let j=10;



        do ball.setDestination(400,0);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
	
	    let exit = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do paddle.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = BrickGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function BrickGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the Paddle's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do paddle.setDirection(1); }
	        else {
	            if (key = 132) { do paddle.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the Paddle, increases the score by one
     * and shrinks the Paddle's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection, PaddleLeft, PaddleRight, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let PaddleLeft = paddle.getLeft();
            let PaddleRight = paddle.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
  
            if (wall = 4) {
                let exit = (PaddleLeft > ballRight) | (PaddleRight < ballLeft);
                if (~exit) {
                    if (ballRight < (PaddleLeft + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (PaddleRight - 10)) { let bouncingDirection = 1; }
                    }

                    let PaddleWidth = PaddleWidth - 2;
                    do paddle.setWidth(PaddleWidth);      
                    let score = score + 1;
                    do Output.moveCursor(22,7);
                    do Output.printInt(score);
                }
            }
            do ball.bounce(bouncingDirection);
        }
        return;
    }
}